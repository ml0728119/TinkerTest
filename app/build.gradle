apply plugin: 'com.android.application'
apply plugin: 'AndResGuard'
apply from:"tinkerbuild.gradle"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:23.1.1"
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }

    compile "com.android.support:multidex:1.0.1"

    //use to test multiDex
//    compile group: 'com.google.guava', name: 'guava', version: '19.0'
//    compile "org.scala-lang:scala-library:2.11.7"

    //use for local maven test
//    compile("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
//    compile("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
//    compile("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
//    compile("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }
}


def javaVersion = JavaVersion.VERSION_1_7

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    defaultConfig {
        applicationId "tinker.sample.android"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.0"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * not like proguard, multiDexKeepProguard is not a list, so we can't just
         * add for you in our task. you can copy tinker keep rules at
         * build/intermediates/tinker_intermediates/tinker_multidexkeep.pro
         */
        multiDexKeepProguard file("keep_in_main_dex.txt")
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"1234\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }

//    aaptOptions{
//        cruncherEnabled false
//    }

//    use to test flavors support
    productFlavors {
        flavor1 {
            applicationId 'tinker.sample.android.flavor1'
        }
        flavor2 {
            applicationId 'tinker.sample.android.flavor2'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

def getOld() {
    return "D:\\StudioWorks\\MallGit\\TinkerTest\\bakApk\\V1.0.0-01.03_13.21-081b5fd"
}
